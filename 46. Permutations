class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:

        # Time complexity O(n!), Space (n!)
        result = []

        def backtrack(path, visited):
            if len(path) == len(nums):
                result.append(path[:])
                return
            for i in range(len(nums)):
                if nums[i] not in visited:
                    visited.add(nums[i])
                    path.append(nums[i])
                    backtrack(path, visited) # Keep exploring with recursion
                    visited.remove(nums[i]) # Go Back
                    path.pop() # Go Back


        backtrack([], set())
        return result       
