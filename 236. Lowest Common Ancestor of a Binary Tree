# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        
        # Time O(n), Space O(n)
        #  •	If the current node is either p or q, return the current node.
        # •	Recursively search in the left and right subtrees:
        # •	If both sides return non-null, the current node is the LCA.
        # •	If only one side returns non-null, propagate that value up.
        # •	If both are null, return null.
        if root is None or root.val == p.val or root.val == q.val:
            return root
        
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left and right:
            return root
        
        if left:
            return left
        else:
            return right
        
