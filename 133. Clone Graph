"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:

    # Time O(V+E), Space O(V+E)
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node:
            return None
    
        cloned = {}
        
        def helper(node):
            if node in cloned:
                return cloned[node]

            new_node = Node(node.val)
            cloned[node] = new_node
            if not node.neighbors:
                return new_node
            else:
                for n in node.neighbors:
                    new_node.neighbors.append(helper(n))
                return new_node

        return helper(node)
