class TrieNode:
    def __init__(self, val):
        self.val = val
        self.children = {}
        self.is_end = False

class WordDictionary:

    def __init__(self):
        self.root = TrieNode('')

    def addWord(self, word: str) -> None:
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode(c)
            node = node.children[c]
        node.is_end = True
        
    def search(self, word: str) -> bool:
        def helper(index, node):
            if index == len(word):
                return node.is_end

            if word[index] != '.':
                if word[index] not in node.children:
                    return False
                node = node.children[word[index]]
                return helper(index+1, node)
            else:
                for child in node.children.values():
                    if helper(index+1, child):
                        return True
                return False

        return helper(0, self.root)

        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
