# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
    # An in-order traversal of a Binary Search Tree (BST) yields nodes in ascending sorted order.
    # âœ… Core Idea:
    # 	â€¢	Perform an in-order traversal.
    # 	â€¢	Keep a counter of how many nodes weâ€™ve visited.
    # 	â€¢	The moment the counter reaches k, weâ€™ve found the kth smallest element.
    # ðŸ§  Steps:
    # 	1.	Traverse the tree using in-order traversal.
    # 	2.	Keep track of how many nodes youâ€™ve seen using a counter.
    # 	3.	Return the value of the node when the counter hits k.

        # Time O(n), Space O(n)
        self.counter = 0
        self.result = 0
        def inorder_tranverse(node):
            if not node:
                return
            inorder_tranverse(node.left)
            self.counter += 1
            if self.counter == k:
                self.result = node.val
            inorder_tranverse(node.right)
        
        inorder_tranverse(root)
        return self.result
